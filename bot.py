import os
from PIL import Image
import pytesseract
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

IMAGE_DIR = "images"
os.makedirs(IMAGE_DIR, exist_ok=True)

user_documents = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_documents[user_id] = {"passport": None, "vehicle": None}

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∫—É, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –¥–≤–∞ —Ñ–æ—Ç–æ:\n"
        "1. üìÑ –ü–∞—Å–ø–æ—Ä—Ç\n"
        "2. üöó –¢–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç –Ω–∞ –∞–≤—Ç–æ"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photos = update.message.photo

    if not photos:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return

    photo_file = await photos[-1].get_file()
    file_path = os.path.join(IMAGE_DIR, f"{user_id}_{len(os.listdir(IMAGE_DIR))}.jpg")
    await photo_file.download_to_drive(file_path)

    if user_documents.get(user_id) is None:
        user_documents[user_id] = {"passport": None, "vehicle": None}

    if user_documents[user_id]["passport"] is None:
        user_documents[user_id]["passport"] = file_path
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–ø–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–≤—Ç–æ.")
    elif user_documents[user_id]["vehicle"] is None:
        user_documents[user_id]["vehicle"] = file_path
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –∞–≤—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –î—è–∫—É—é!")
        await update.message.reply_text("üîç –ó—á–∏—Ç—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")
        passport_text = extract_text_from_image(user_documents[user_id]["passport"])
        vehicle_text = extract_text_from_image(user_documents[user_id]["vehicle"])
        response = (
            "üìÑ **–ü–∞—Å–ø–æ—Ä—Ç:**\n" + passport_text + "\n\n" +
            "üöó **–î–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–≤—Ç–æ:**\n" + vehicle_text + "\n\n" +
            "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π: –¢–∞–∫ / –ù—ñ"
        )
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("–£ –º–µ–Ω–µ –≤–∂–µ —î –¥–≤–∞ —Ñ–æ—Ç–æ. –Ø–∫—â–æ —Ö–æ—á–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤—ñ ‚Äî –Ω–∞–ø–∏—à–∏ /start –∑–∞–Ω–æ–≤–æ.")

def extract_text_from_image(image_path):
    try:
        img = Image.open(image_path)
        text = pytesseract.image_to_string(img, lang='eng+ukr')
        return text
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}"

if __name__ == '__main__':
    app = ApplicationBuilder().token("7751870205:AAEKIglHGkeDAF7oDZaH5Udfsk9lkCy9gy8").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.run_polling()

import os
import re
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from PIL import Image
import pytesseract
from rapidfuzz import fuzz, process
import openai

load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

IMAGE_DIR = "images"
os.makedirs(IMAGE_DIR, exist_ok=True)

user_documents = {}
user_agreement = {}
user_openaichat = {}

known_brands = ["Toyota", "Ford", "Honda", "BMW", "Mercedes", "Nissan", "Audi", "Kia", "Hyundai", "Chevrolet", "Volkswagen", "Mazda", "Subaru", "Tesla", "Jeep"]
known_states = ["California", "Massachusetts", "New York", "Florida", "Texas", "Illinois", "Ohio", "Pennsylvania", "Georgia", "Nevada", "Arizona", "Colorado"]

def extract_text_from_image(image_path, lang='eng+ukr'):
    try:
        img = Image.open(image_path)
        text = pytesseract.image_to_string(img, lang=lang)
        return text
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}"

def clean_text(text):
    lines = text.splitlines()
    cleaned = [re.sub(r'[^–ê-–Ø–∞-—èA-Za-z0-9 .,/-]', '', line.strip()) for line in lines if line.strip()]
    return '\n'.join(cleaned)

def normalize_text_line(line):
    words = line.split()
    normalized = []
    for word in words:
        brand_match = process.extractOne(word, known_brands, scorer=fuzz.ratio)
        state_match = process.extractOne(word, known_states, scorer=fuzz.ratio)
        if brand_match and brand_match[1] >= 80:
            normalized.append(brand_match[0])
        elif state_match and state_match[1] >= 80:
            normalized.append(state_match[0])
        else:
            normalized.append(word)
    return ' '.join(normalized)

def generate_insurance_policy(user_id: int, passport_text: str, vehicle_text: str) -> str:
    passport_text = clean_text(passport_text)
    vehicle_text_lines = clean_text(vehicle_text).splitlines()
    vehicle_text = '\n'.join([normalize_text_line(line) for line in vehicle_text_lines])
    policy_content = (
        "========== –°–¢–†–ê–•–û–í–ò–ô –ü–û–õ–Ü–° ==========\n\n"
        "üë§ –ü–ê–°–ü–û–†–¢–ù–Ü –î–ê–ù–Ü:\n"
        f"{passport_text}\n\n"
        "üöó –î–ê–ù–Ü –ê–í–¢–û–ú–û–ë–Ü–õ–Ø:\n"
        f"{vehicle_text}\n\n"
        "üìÖ –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "üí∞ –°—É–º–∞: 100 USD\n"
        "üìÑ –ü–æ–ª—ñ—Å –≤–∏–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é\n\n"
        "======================================"
    )
    policy_path = os.path.join(IMAGE_DIR, f"{user_id}_policy.txt")
    with open(policy_path, "w", encoding="utf-8") as f:
        f.write(policy_content)
    return policy_path

from openai import OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

async def ai_completion(prompt: str, user_id: int) -> str:
    try:
        if user_id not in user_openaichat:
            user_openaichat[user_id] = [
                {"role": "system", "content": "–¢–∏ ‚Äî –≤–≤—ñ—á–ª–∏–≤–∏–π Telegram-–±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è. –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: \n1. –ü–æ–ø—Ä–æ—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –∞–≤—Ç–æ.\n2. –ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ, –∑—á–∏—Ç–∞–π —Ç–µ–∫—Å—Ç –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —ñ –∑–∞–ø–∏—Ç–∞–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.\n3. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≥–æ–¥–∂—É—î—Ç—å—Å—è, –ø–æ–≤—ñ–¥–æ–º –ø—Ä–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ —Ç–∞ –∑–∞–ø–∏—Ç–∞–π –∑–≥–æ–¥—É.\n4. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≥–æ–¥–∂—É—î—Ç—å—Å—è, –∑–≥–µ–Ω–µ—Ä—É–π —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å —ñ –Ω–∞–¥—ñ—à–ª–∏ –π–æ–≥–æ. –ü—Ä–æ—Å–∏ –ª–∏—à–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤! –Ü –Ω–µ –ø–∏—à–∏ —â–æ–± –ª—é–¥–∏ –Ω–∞–¥–∞–≤–∞–ª–∏ —Ç–æ–±—ñ –¥–∞–Ω–Ω—ñ –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–∏–≥–ª—è–¥—ñ."}
            ]
        user_openaichat[user_id].append({"role": "user", "content": prompt})
        response = client.chat.completions.create(
            model="gpt-4.1-nano",
            messages=user_openaichat[user_id],
            temperature=0.7,
            max_tokens=300,
        )
        reply = response.choices[0].message.content.strip()
        user_openaichat[user_id].append({"role": "assistant", "content": reply})
        return reply
    except Exception as e:
        return "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑ AI. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."

async def extract_structured_data_from_ocr(passport_text_raw: str, vehicle_text_raw: str, user_id: int) -> str:
    prompt = f"""
–û—Å—å —Ç–µ–∫—Å—Ç –∑ –¥–≤–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –¢–µ–∫—Å—Ç –º–∞—î –ø–æ–º–∏–ª–∫–∏, —Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –∑ —Ñ–æ—Ç–æ.
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —ñ –≤–∏–ø—Ä–∞–≤ –ø–æ–º–∏–ª–∫–∏. –°—Ç–≤–æ—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å —Ç–∞–∫—ñ –ø–æ–ª—è:

üë§ –ü–ê–°–ü–û–†–¢–ù–Ü –î–ê–ù–Ü:
- –ü–Ü–ë
- –°–µ—Ä—ñ—è —ñ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (—è–∫—â–æ —î)
- –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ —ñ–Ω—à—ñ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ (—è–∫—â–æ —î)

üöó –î–ê–ù–Ü –ê–í–¢–û:
- –ú–∞—Ä–∫–∞ —Ç–∞ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ
- –†—ñ–∫ –≤–∏–ø—É—Å–∫—É
- VIN –∞–±–æ –¥–µ—Ä–∂–Ω–æ–º–µ—Ä (—è–∫—â–æ —î)
- –®—Ç–∞—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Massachusetts)

–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –∑–≤—ñ—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ù–µ –¥–æ–¥–∞–≤–∞–π –ø–æ—è—Å–Ω–µ–Ω—å.  
–û—Å—å –¥–∞–Ω—ñ:

=== –ü–ê–°–ü–û–†–¢ ===
{passport_text_raw}

=== –ê–í–¢–û ===
{vehicle_text_raw}
"""
    return await ai_completion(prompt, user_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_documents[user_id] = {"passport": None, "vehicle": None}
    user_agreement[user_id] = None
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∫—É, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –¥–≤–∞ —Ñ–æ—Ç–æ:\n1. üìÑ –ü–∞—Å–ø–æ—Ä—Ç\n2. üöó –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–≤—Ç–æ")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photos = update.message.photo
    if not photos:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return
    photo_file = await photos[-1].get_file()
    file_path = os.path.join(IMAGE_DIR, f"{user_id}_{len(os.listdir(IMAGE_DIR))}.jpg")
    await photo_file.download_to_drive(file_path)
    if user_documents.get(user_id) is None:
        user_documents[user_id] = {"passport": None, "vehicle": None}
    if user_documents[user_id]["passport"] is None:
        user_documents[user_id]["passport"] = file_path
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–ø–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–≤—Ç–æ.")
    elif user_documents[user_id]["vehicle"] is None:
        user_documents[user_id]["vehicle"] = file_path
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –∞–≤—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –î—è–∫—É—é!")
        await update.message.reply_text("üîç –ó—á–∏—Ç—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")
        raw_passport = extract_text_from_image(user_documents[user_id]["passport"], lang='ukr')
        raw_vehicle = extract_text_from_image(user_documents[user_id]["vehicle"], lang='eng')
        user_documents[user_id]["passport_raw"] = raw_passport
        user_documents[user_id]["vehicle_raw"] = raw_vehicle
        structured_info = await extract_structured_data_from_ocr(raw_passport, raw_vehicle, user_id)
        user_agreement[user_id] = "awaiting_confirmation"
        await update.message.reply_text("üîç –û—Å—å —â–æ —è –∑–º—ñ–≥ –∑—á–∏—Ç–∞—Ç–∏ –∑ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:\n\n" + structured_info + "\n\n–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π: –¢–∞–∫ / –ù—ñ")

async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip().lower()
    if user_id not in user_agreement:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —á–µ—Ä–µ–∑ /start.")
        return
    status = user_agreement[user_id]
    if status == "awaiting_confirmation":
        if text == "—Ç–∞–∫":
            user_agreement[user_id] = "awaiting_price"
            await update.message.reply_text("üíµ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∫–æ—à—Ç—É—î 100 usd. –ó–≥–æ–¥–Ω—ñ? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π: –¢–∞–∫ / –ù—ñ")
        elif text == "–Ω—ñ":
            user_agreement[user_id] = "rejected"
            user_documents[user_id] = {"passport": None, "vehicle": None}
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—ñ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.")
        else:
            reply = await ai_completion(text, user_id)
            await update.message.reply_text(reply)
    elif status == "awaiting_price":
        if text == "—Ç–∞–∫":
            await update.message.reply_text("‚úÖ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ì–µ–Ω–µ—Ä—É—é –ø–æ–ª—ñ—Å...")
            passport_text = user_documents[user_id].get("passport_raw", "")
            vehicle_text = user_documents[user_id].get("vehicle_raw", "")
            policy_path = generate_insurance_policy(user_id, passport_text, vehicle_text)
            with open(policy_path, "rb") as f:
                await update.message.reply_document(f, filename="insurance_policy.txt")
            await update.message.reply_text("üìÑ –ì–æ—Ç–æ–≤–æ! –í–∞—à —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
            user_agreement[user_id] = "done"
        elif text == "–Ω—ñ":
            await update.message.reply_text("‚ùå –í–∏–±–∞—á—Ç–µ, —Ü—ñ–Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞.")
        else:
            reply = await ai_completion(text, user_id)
            await update.message.reply_text(reply)
    else:
        reply = await ai_completion(text, user_id)
        await update.message.reply_text(reply)

async def handle_invalid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –ø—Ä–∏–π–º–∞—é –ª–∏—à–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Ç–∞ –∞–≤—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞. –ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reply))
    app.add_handler(MessageHandler(~filters.PHOTO & ~filters.TEXT & ~filters.COMMAND, handle_invalid))
    app.run_polling()

import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from PIL import Image
import pytesseract

IMAGE_DIR = "images"
os.makedirs(IMAGE_DIR, exist_ok=True)

user_documents = {}
user_agreement = {}

def extract_text_from_image(image_path):
    try:
        img = Image.open(image_path)
        text = pytesseract.image_to_string(img, lang='eng+ukr')
        return text
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}"

def clean_text(text):
    lines = text.splitlines()
    cleaned = [line.strip() for line in lines if line.strip()]
    return '\n'.join(cleaned)

def generate_insurance_policy(user_id: int, passport_text: str, vehicle_text: str) -> str:
    passport_text = clean_text(passport_text)
    vehicle_text = clean_text(vehicle_text)

    policy_content = (
        "========== –°–¢–†–ê–•–û–í–ò–ô –ü–û–õ–Ü–° ==========\n\n"
        "üë§ –ü–ê–°–ü–û–†–¢–ù–Ü –î–ê–ù–Ü:\n"
        f"{passport_text}\n\n"
        "üöó –î–ê–ù–Ü –ê–í–¢–û–ú–û–ë–Ü–õ–Ø:\n"
        f"{vehicle_text}\n\n"
        "üìÖ –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "üí∞ –°—É–º–∞: 100 USD\n"
        "üìÑ –ü–æ–ª—ñ—Å –≤–∏–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é\n\n"
        "======================================"
    )

    policy_path = os.path.join(IMAGE_DIR, f"{user_id}_policy.txt")
    with open(policy_path, "w", encoding="utf-8") as f:
        f.write(policy_content)

    return policy_path


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_documents[user_id] = {"passport": None, "vehicle": None}
    user_agreement[user_id] = None

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∫—É, –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –¥–≤–∞ —Ñ–æ—Ç–æ:\n"
        "1. üìÑ –ü–∞—Å–ø–æ—Ä—Ç\n"
        "2. üöó –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–≤—Ç–æ"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photos = update.message.photo

    if not photos:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return

    photo_file = await photos[-1].get_file()
    file_path = os.path.join(IMAGE_DIR, f"{user_id}_{len(os.listdir(IMAGE_DIR))}.jpg")
    await photo_file.download_to_drive(file_path)

    if user_documents.get(user_id) is None:
        user_documents[user_id] = {"passport": None, "vehicle": None}

    if user_documents[user_id]["passport"] is None:
        user_documents[user_id]["passport"] = file_path
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–ø–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–≤—Ç–æ.")
    elif user_documents[user_id]["vehicle"] is None:
        user_documents[user_id]["vehicle"] = file_path
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –∞–≤—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –î—è–∫—É—é!")
        await update.message.reply_text("üîç –ó—á–∏—Ç—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")

        passport_text = extract_text_from_image(user_documents[user_id]["passport"])
        vehicle_text = extract_text_from_image(user_documents[user_id]["vehicle"])

        response = (
            "üìÑ *–ü–∞—Å–ø–æ—Ä—Ç:*\n" + passport_text + "\n\n" +
            "üöó *–î–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–≤—Ç–æ:*\n" + vehicle_text + "\n\n" +
            "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π: –¢–∞–∫ / –ù—ñ"
        )
        user_agreement[user_id] = "awaiting_confirmation"
        await update.message.reply_text(response)

async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip().lower()

    if user_id not in user_agreement:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —á–µ—Ä–µ–∑ /start.")
        return

    status = user_agreement[user_id]

    if status == "awaiting_confirmation":
        if text == "—Ç–∞–∫":
            user_agreement[user_id] = "confirmed"
            await update.message.reply_text("üíµ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∫–æ—à—Ç—É—î 100 usd. –ó–≥–æ–¥–Ω—ñ? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π: –¢–∞–∫ / –ù—ñ")
            user_agreement[user_id] = "awaiting_price"
        elif text == "–Ω—ñ":
            user_agreement[user_id] = "rejected"
            user_documents[user_id] = {"passport": None, "vehicle": None}
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—ñ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.")
        else:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π '–¢–∞–∫' –∞–±–æ '–ù—ñ'.")

    elif status == "awaiting_price":
        if text == "—Ç–∞–∫":
            await update.message.reply_text("‚úÖ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ì–µ–Ω–µ—Ä—É—é –ø–æ–ª—ñ—Å...")

            passport_text = extract_text_from_image(user_documents[user_id]["passport"])
            vehicle_text = extract_text_from_image(user_documents[user_id]["vehicle"])

            policy_path = generate_insurance_policy(user_id, passport_text, vehicle_text)

            with open(policy_path, "rb") as f:
                await update.message.reply_document(f, filename="insurance_policy.txt")

            await update.message.reply_text("üìÑ –ì–æ—Ç–æ–≤–æ! –í–∞—à —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
            user_agreement[user_id] = "done"
        elif text == "–Ω—ñ":
            await update.message.reply_text("‚ùå –í–∏–±–∞—á—Ç–µ, —Ü—ñ–Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞.")
        else:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π '–¢–∞–∫' –∞–±–æ '–ù—ñ'.")
    else:
        await update.message.reply_text("–ù–µ —Ä–æ–∑—É–º—ñ—é. –ù–∞–ø–∏—à–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.")

async def handle_invalid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –ø—Ä–∏–π–º–∞—é –ª–∏—à–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Ç–∞ –∞–≤—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞. –ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")

if __name__ == '__main__':
    TOKEN = os.getenv("7751870205:AAEKIglHGkeDAF7oDZaH5Udfsk9lkCy9gy8")
    if not TOKEN:
        print("ERROR: TELEGRAM_TOKEN environment variable not set.")
        exit(1)

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reply))
    app.add_handler(MessageHandler(~filters.PHOTO & ~filters.TEXT & ~filters.COMMAND, handle_invalid))
    app.run_polling()
